// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String          @id @default(uuid())
  email                String          @unique
  password             String
  firstName            String
  lastName             String
  role                 UserRole        @default(CLIENT)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  salons               Salon[]
  products             Product[] // Relation to products
  bookings             Booking[]
  reviews              Review[]
  favorites            Favorite[]
  serviceLikes         ServiceLike[]
  sentMessages         Message[]       @relation("SentMessages")
  conversations1       Conversation[]  @relation("User1Conversations")
  conversations2       Conversation[]  @relation("User2Conversations")
  notifications        Notification[]
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
}

model Salon {
  id                   String         @id @default(uuid())
  name                 String
  backgroundImage      String?
  province             String
  city                 String
  town                 String
  latitude             Float?
  longitude            Float?
  contactEmail         String?
  phoneNumber          String?
  whatsapp             String?
  website              String?
  bookingType          BookingType    @default(ONSITE)
  offersMobile         Boolean        @default(false)
  mobileFee            Float?
  isAvailableNow       Boolean        @default(false)
  operatingHours       Json?
  operatingDays        String[]
  approvalStatus       ApprovalStatus @default(PENDING)
  avgRating            Float          @default(0)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  ownerId              String         @unique
  owner                User           @relation(fields: [ownerId], references: [id])
  services             Service[]
  bookings             Booking[]
  reviews              Review[]
  favorites            Favorite[]
  gallery              GalleryImage[]
}

model Service {
  id             String         @id @default(uuid())
  title          String
  description    String
  price          Float
  duration       Int
  images         String[]
  approvalStatus ApprovalStatus @default(PENDING)
  salonId        String
  salon          Salon          @relation(fields: [salonId], references: [id])
  bookings       Booking[]
  likes          ServiceLike[]
  likeCount      Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  promotions     Promotion[] // Relation to promotions
}

model Review {
  id             String         @id @default(uuid())
  rating         Int
  comment        String
  approvalStatus ApprovalStatus @default(PENDING)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         String
  author         User           @relation(fields: [userId], references: [id])
  salonId        String
  salon          Salon          @relation(fields: [salonId], references: [id])
  bookingId      String         @unique
  booking        Booking        @relation(fields: [bookingId], references: [id])
}

model Booking {
  id          String        @id @default(uuid())
  bookingTime DateTime
  isMobile    Boolean
  totalCost   Float
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  salonId     String
  salon       Salon         @relation(fields: [salonId], references: [id])
  serviceId   String
  service     Service       @relation(fields: [serviceId], references: [id])
  clientPhone String?
  review      Review?
}

// New Model for Products
model Product {
  id             String         @id @default(uuid())
  name           String
  description    String
  price          Float
  images         String[]
  isOnSale       Boolean        @default(false)
  salePrice      Float?
  approvalStatus ApprovalStatus @default(PENDING)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  sellerId       String
  seller         User           @relation(fields: [sellerId], references: [id])
  promotions     Promotion[]
}

// New Model for Promotions
model Promotion {
  id                 String    @id @default(uuid())
  description        String
  discountPercentage Float
  startDate          DateTime
  endDate            DateTime
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  serviceId          String?
  service            Service?  @relation(fields: [serviceId], references: [id])
  productId          String?
  product            Product?  @relation(fields: [productId], references: [id])
}

model Conversation {
  id        String    @id @default(uuid())
  user1Id   String
  user2Id   String
  user1     User      @relation("User1Conversations", fields: [user1Id], references: [id])
  user2     User      @relation("User2Conversations", fields: [user2Id], references: [id])
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([user1Id, user2Id])
}

model Message {
  id             String       @id @default(uuid())
  content        String
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookingId String?
  link      String?
}

model Favorite {
  userId    String
  salonId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  salon     Salon    @relation(fields: [salonId], references: [id])

  @@id([userId, salonId])
}

model ServiceLike {
  userId    String
  serviceId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])

  @@id([userId, serviceId])
}

model GalleryImage {
  id        String   @id @default(uuid())
  imageUrl  String
  caption   String?
  salonId   String
  salon     Salon    @relation(fields: [salonId], references: [id])
  createdAt DateTime @default(now())
}

enum UserRole {
  CLIENT
  SALON_OWNER
  ADMIN
  PRODUCT_SELLER // New role
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingType {
  ONSITE
  MOBILE
  BOTH
}

enum BookingStatus {
  PENDING
  CONFIRMED
  DECLINED
  COMPLETED
  CANCELLED
}