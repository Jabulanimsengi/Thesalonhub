generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMs for controlled values
enum UserRole {
  CLIENT
  SALON_OWNER
  ADMIN
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingType {
  ONSITE
  MOBILE
  BOTH
}

enum BookingStatus {
  PENDING
  CONFIRMED
  DECLINED
  COMPLETED
}

// MODELS / TABLES

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole  @default(CLIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  salon         Salon?
  reviews       Review[]
  bookings      Booking[]
  conversations Conversation[]
  sentMessages  Message[]      @relation("Sender")
}

model Salon {
  id              String         @id @default(cuid())
  name            String
  backgroundImage String?
  province        String
  city            String
  town            String
  offersMobile    Boolean        @default(false)
  mobileFee       Float?
  bookingType     BookingType    @default(ONSITE)
  operatingHours  Json?
  latitude        Float?
  longitude       Float?
  avgRating       Float          @default(0)
  operatingDays   String[]
  approvalStatus  ApprovalStatus @default(PENDING)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  ownerId         String         @unique
  owner           User           @relation(fields: [ownerId], references: [id])
  
  services        Service[]
  reviews         Review[]
  bookings        Booking[]
}

model Service {
  id             String         @id @default(cuid())
  title          String
  description    String
  price          Float
  images         String[]
  approvalStatus ApprovalStatus @default(PENDING)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  salonId        String
  salon          Salon          @relation(fields: [salonId], references: [id])
  
  bookings       Booking[]
}

model Review {
  id             String         @id @default(cuid())
  rating         Int
  comment        String
  approvalStatus ApprovalStatus @default(PENDING)
  createdAt      DateTime       @default(now())

  userId         String
  author         User           @relation(fields: [userId], references: [id])

  salonId        String
  salon          Salon          @relation(fields: [salonId], references: [id])

  bookingId      String         @unique
  booking        Booking        @relation(fields: [bookingId], references: [id])
}

model Booking {
  id          String        @id @default(cuid())
  bookingDate DateTime
  isMobile    Boolean
  totalCost   Float
  createdAt   DateTime      @default(now())
  status      BookingStatus @default(PENDING)

  userId      String
  client      User     @relation(fields: [userId], references: [id])
  
  salonId     String
  salon       Salon    @relation(fields: [salonId], references: [id])

  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])

  review      Review?
}

model Conversation {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  participants User[]
  messages     Message[]
}

model Message {
  id             String       @id @default(cuid())
  body           String
  createdAt      DateTime     @default(now())
  read           Boolean      @default(false)

  sender         User         @relation("Sender", fields: [senderId], references: [id])
  senderId       String
  
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
}