datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole

  salons         Salon[]
  bookings       Booking[]
  reviews        Review[]
  favorites      Favorite[]
  serviceLikes   ServiceLike[]
  sentMessages   Message[]      @relation("SentMessages")
  receivedMessages Message[]    @relation("ReceivedMessages")
  conversations1 Conversation[] @relation("User1Conversations")
  conversations2 Conversation[] @relation("User2Conversations")
  notifications  Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Salon {
  id          String   @id @default(uuid())
  ownerId     String
  name        String
  province    String
  city        String
  town        String
  latitude    Float?
  longitude   Float?
  contactEmail String?
  phoneNumber  String?
  
  backgroundImage String?
  
  bookingType  String   @default("ONSITE") // ONSITE, MOBILE, BOTH
  offersMobile Boolean  @default(false)
  mobileFee    Float?

  isAvailableNow Boolean @default(false)

  operatingHours Json?
  
  approvalStatus String @default("PENDING")

  avgRating Float?
  
  owner       User       @relation(fields: [ownerId], references: [id])
  services    Service[]
  bookings    Booking[]
  reviews     Review[]
  favorites   Favorite[]
  gallery     GalleryImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          String   @id @default(uuid())
  salonId     String
  title       String
  description String
  price       Float
  duration    Int // in minutes
  
  approvalStatus String @default("PENDING") // PENDING, APPROVED, REJECTED

  salon       Salon      @relation(fields: [salonId], references: [id])
  bookings    Booking[]
  likes       ServiceLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id        String   @id @default(uuid())
  userId    String
  salonId   String
  serviceId String
  bookingTime DateTime
  status    String   @default("PENDING") // PENDING, CONFIRMED, CANCELLED, COMPLETED

  user      User     @relation(fields: [userId], references: [id])
  salon     Salon    @relation(fields: [salonId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])
  review    Review?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  salonId   String
  bookingId String   @unique
  rating    Int
  comment   String

  author    User     @relation(fields: [userId], references: [id])
  salon     Salon    @relation(fields: [salonId], references: [id])
  booking   Booking  @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id      String @id @default(uuid())
  userId  String
  salonId String

  user  User  @relation(fields: [userId], references: [id])
  salon Salon @relation(fields: [salonId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, salonId])
}

model ServiceLike {
  id        String  @id @default(uuid())
  userId    String
  serviceId String

  user    User    @relation(fields: [userId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, serviceId])
}

model GalleryImage {
  id      String  @id @default(uuid())
  salonId String
  imageUrl String
  caption  String?

  salon Salon @relation(fields: [salonId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id        String    @id @default(uuid())
  user1Id   String
  user2Id   String
  user1     User      @relation("User1Conversations", fields: [user1Id], references: [id])
  user2     User      @relation("User2Conversations", fields: [user2Id], references: [id])
  messages  Message[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([user1Id, user2Id])
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  senderId       String
  recipientId    String
  content        String
  isRead         Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  recipient      User         @relation("ReceivedMessages", fields: [recipientId], references: [id])

  createdAt      DateTime     @default(now())
}


model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  link      String?  // e.g., /bookings/some-id

  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}


enum UserRole {
  CLIENT
  SALON_OWNER
  ADMIN
}